<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on Yii Kuo Chong</title>
    <link>https://yiikuochong.com/tags/android/</link>
    <description>Recent content in android on Yii Kuo Chong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://yiikuochong.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clean Architecture with Jetpack Compose</title>
      <link>https://yiikuochong.com/posts/clean-code-architecture-with-jetpack-compose/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://yiikuochong.com/posts/clean-code-architecture-with-jetpack-compose/</guid>
      <description>I&amp;rsquo;m pretty into the whole privacy stuff. This means &amp;ldquo;de-googling&amp;rdquo; mobile devices and removing any proprietary services from the core function of the operating system if feasible. One of the methods to achieve this is replacing the Google Play Store with open source alternatives like F-Droid, or Aurora Store.
The one problem here is that with 2 different app stores also comes 2 different user experiences. Often times, things like auto-update and auto-installation is unavailable depending on how the open source stores are installed.</description>
    </item>
    <item>
      <title>Reverse Engineering Hi-Hive Community</title>
      <link>https://yiikuochong.com/posts/reverse-engineering-hi-hive-community/</link>
      <pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://yiikuochong.com/posts/reverse-engineering-hi-hive-community/</guid>
      <description>During COVID-19, my university (UTAR) debuted an attendance tracking called Hi-Hive Community. A lecturer would present a QR code, and the students will scan it to take attendance.
After using the application for a few years, I noticed that it was too bloated with unnecessary features, it&amp;rsquo;s not very responsive, and important items are buried in unending levels of menus.
Thus, I have the idea of rebuilding the application using Kotlin, Jetpack Compose, and more modern UI frameworks.</description>
    </item>
  </channel>
</rss>
